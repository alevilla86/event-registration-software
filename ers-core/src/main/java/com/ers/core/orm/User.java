package com.ers.core.orm;
// Generated Mar 9, 2018 2:36:46 PM by Hibernate Tools 4.3.1

import com.ers.core.dao.common.UserConstants;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.GenericGenerator;

/**
 * ErsUser generated by hbm2java
 */
@Entity
@Table(name = "ers_user", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
public class User implements java.io.Serializable {

    public enum Type {

        ADMIN, ORANIZER, USER;

        public static Type getByName(String name) {
            for (Type type : values()) {
                if (StringUtils.equalsIgnoreCase(name, type.name())) {
                    return type;
                }
            }

            return null;
        }
    }

    public enum Status {

        ENABLED, DISABLED, LOCKED;
    }

    private String id;
    private String email;
    private String password;
    private String firstName;
    private String lastName;
    private Type type;
    private Status status;
    private int failedLoginAttempts;
    private Date dateCreated;
    private Date dateModified;
    private UserProfile userProfile;
    private Set<Event> events = new HashSet<>(0);

    //Transient.
    private SecurityToken tokenInUse;

    public User() {
    }

    @Id
    @GenericGenerator(name = "id", strategy = "com.ers.core.util.RandomUUIDGenerator")
    @GeneratedValue(generator = "id")
    @Column(name = "id", unique = true, nullable = false, length = 36)
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @Column(name = "email", unique = true, nullable = false, length = UserConstants.MAX_USER_EMAIL_LENGTH)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "password", nullable = false, length = 256)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "first_name", nullable = false, length = UserConstants.MAX_USER_NAME_LENGTH)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "last_name", nullable = false, length = UserConstants.MAX_USER_LAST_NAME_LENGTH)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false, length = 9)
    public Type getType() {
        return this.type;
    }

    public void setType(Type type) {
        this.type = type;
    }

    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false, length = 8)
    public Status getStatus() {
        return this.status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    @Column(name = "failed_login_attempts", nullable = false)
    public int getFailedLoginAttempts() {
        return this.failedLoginAttempts;
    }

    public void setFailedLoginAttempts(int failedLoginAttempts) {
        this.failedLoginAttempts = failedLoginAttempts;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "date_created", nullable = false, length = 19)
    public Date getDateCreated() {
        return this.dateCreated;
    }

    public void setDateCreated(Date dateCreated) {
        this.dateCreated = dateCreated;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "date_modified", nullable = false, length = 19)
    public Date getDateModified() {
        return this.dateModified;
    }

    public void setDateModified(Date dateModified) {
        this.dateModified = dateModified;
    }

    @OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
    public UserProfile getUserProfile() {
        return this.userProfile;
    }

    public void setUserProfile(UserProfile userProfile) {
        this.userProfile = userProfile;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_join_event", joinColumns = {
        @JoinColumn(name = "user_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "event_id", nullable = false, updatable = false)})
    public Set<Event> getEvents() {
        return this.events;
    }

    public void setEvents(Set<Event> events) {
        this.events = events;
    }

    @Transient
    public SecurityToken getTokenInUse() {
        return tokenInUse;
    }

    public void setTokenInUse(SecurityToken tokenInUse) {
        this.tokenInUse = tokenInUse;
    }

    @Transient
    public boolean isUser() {
        return this.type == Type.USER;
    }

    @Transient
    public boolean isOrganizer() {
        return this.type == Type.ORANIZER;
    }

    @Transient
    public boolean isAdmin() {
        return this.type == Type.ADMIN;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 89 * hash + Objects.hashCode(this.id);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final User other = (User) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public String toString() {
        return "User{" + "id=" + id + ", email=" + email + ", firstName=" + firstName
                + ", lastName=" + lastName + ", type=" + type + ", status=" + status
                + ", failedLoginAttempts=" + failedLoginAttempts + ", dateCreated=" + dateCreated
                + ", dateModified=" + dateModified + '}';
    }

}
